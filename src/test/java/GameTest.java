/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Test;

import java.awt.Point;

import static org.hamcrest.core.IsCollectionContaining.hasItems;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

public class GameTest {

	@Test
	public void cellWithFourLiveNeighborsDies() {
		// Cells are intentionally out of order since order does not matter.
		final Game game = new Game(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0),
				new Point(-1, -1),
				new Point(0, -1)
		);

		game.tick();

		assertThat(game.getLiveCells(), hasItems(
				new Point(-1, -1),
				new Point(-1, 1),
				new Point(0, -1),
				new Point(0, 1)
		));
	}

	@Test
	public void cellWithNoNeighborsDies() {
		final Game                game         = new Game(new Point(0, 0));
		game.tick();

		assertTrue(game.getLiveCells().isEmpty());
	}

	@Test
	public void cellWithOneLiveNeighborInColumnDies() {
		// Cells are intentionally out of order since order does not matter.
		final Game game = new Game(
				new Point(0, 0),
				new Point(0, 1),
				new Point(0, -1)
		);
		game.tick();

		assertThat(game.getLiveCells(), hasItems(
				new Point(0, 0)
		));
	}

	@Test
	public void cellWithOneLiveNeighborInRowDies() {
		final Game game = new Game(
				new Point(-1, 1),
				new Point(0, 0),
				new Point(1, -1)
		);

		game.tick();

		assertThat(game.getLiveCells(), hasItems(
				new Point(0, 0)
		));
	}

	@Test
	public void deadCellWithThreeLiveNeighborIsBorn() {
		// Cells are intentionally out of order since order does not matter.
		final Game game = new Game(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0)
		);


		game.tick();

		assertThat(game.getLiveCells(), hasItems(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0),
				new Point(0, 0)
		));
	}
}
