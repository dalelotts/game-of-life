package com.dalelotts.gol;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.Test;

import java.awt.Point;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;


final class GameTest {

	@Test
	void cellWithFourLiveNeighborsDies() {
		// Cells are intentionally out of order since order does not matter.
		final Game game = new Game(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0),
				new Point(-1, -1),
				new Point(0, -1)
		);

		game.tick();

		assertThat(game.getLiveCells()).contains(
				new Point(-1, -1),
				new Point(-1, 1),
				new Point(0, -1),
				new Point(0, 1)
		);
	}

	@Test
	void cellWithNoNeighborsDies() {
		final Game game = new Game(new Point(0, 0));
		game.tick();

		assertTrue(game.getLiveCells().isEmpty());
	}

	@Test
	void cellWithOneLiveNeighborInColumnDies() {
		// Cells are intentionally out of order since order does not matter.
		final var expectedSurvivor = new Point(0, 0);
		final var game = new Game(
				expectedSurvivor,
				new Point(0, 1),
				new Point(0, -1)
		);
		game.tick();

		assertThat(game.getLiveCells()).contains(
				expectedSurvivor
		);
	}

	@Test
	void cellWithThreeLiveNeighborsSurvives() {
		final var expectedSurvivor = new Point(0, 0);
		final var game = new Game(
				expectedSurvivor,
				new Point(-1, 1),
				new Point(0, 1),
				new Point(1, -1)
		);

		game.tick();

		assertThat(game.getLiveCells()).contains(expectedSurvivor);
	}

	@Test
	void cellWithTwoLiveNeighborsSurvives() {
		final var expectedSurvivor = new Point(0, 0);
		final var game = new Game(
				new Point(-1, 1),
				expectedSurvivor,
				new Point(1, -1)
		);

		game.tick();

		assertThat(game.getLiveCells()).contains(
				expectedSurvivor
		);
	}

	@Test
	void deadCellWithThreeLiveNeighborsIsBorn() {
		// Cells are intentionally out of order since order does not matter.
		final var game = new Game(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0)
		);


		game.tick();

		assertThat(game.getLiveCells()).contains(
				new Point(-1, 1),
				new Point(0, 1),
				new Point(-1, 0),
				new Point(0, 0)
		);
	}
}
